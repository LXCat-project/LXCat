{
  "$ref": "#/definitions/CrossSectionInput<AnySpecies>",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AtomJ1L2Impl": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "additionalProperties": false,
          "properties": {
            "core": {
              "$ref": "#/definitions/AtomLSImpl"
            },
            "excited": {
              "additionalProperties": false,
              "properties": {
                "config": {
                  "items": {
                    "$ref": "#/definitions/ShellEntry"
                  },
                  "type": "array"
                },
                "scheme": {
                  "const": "LS",
                  "type": "string"
                },
                "term": {
                  "$ref": "#/definitions/LSTermImpl"
                }
              },
              "required": [
                "scheme",
                "config",
                "term"
              ],
              "type": "object"
            }
          },
          "required": [
            "core",
            "excited"
          ],
          "type": "object"
        },
        "scheme": {
          "const": "J1L2",
          "type": "string"
        },
        "term": {
          "$ref": "#/definitions/J1L2Term"
        }
      },
      "required": [
        "scheme",
        "config",
        "term"
      ],
      "type": "object"
    },
    "AtomLS1Impl": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "additionalProperties": false,
          "properties": {
            "core": {
              "additionalProperties": false,
              "properties": {
                "config": {
                  "items": {
                    "$ref": "#/definitions/ShellEntry"
                  },
                  "type": "array"
                },
                "scheme": {
                  "const": "LS",
                  "type": "string"
                },
                "term": {
                  "$ref": "#/definitions/LSTermImpl"
                }
              },
              "required": [
                "scheme",
                "config",
                "term"
              ],
              "type": "object"
            },
            "excited": {
              "additionalProperties": false,
              "properties": {
                "config": {
                  "items": {
                    "$ref": "#/definitions/ShellEntry"
                  },
                  "type": "array"
                },
                "scheme": {
                  "const": "LS",
                  "type": "string"
                },
                "term": {
                  "$ref": "#/definitions/LSTermImpl"
                }
              },
              "required": [
                "scheme",
                "config",
                "term"
              ],
              "type": "object"
            }
          },
          "required": [
            "core",
            "excited"
          ],
          "type": "object"
        },
        "scheme": {
          "const": "LS1",
          "type": "string"
        },
        "term": {
          "$ref": "#/definitions/LS1Term"
        }
      },
      "required": [
        "scheme",
        "config",
        "term"
      ],
      "type": "object"
    },
    "AtomLSImpl": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "items": {
            "$ref": "#/definitions/ShellEntry"
          },
          "type": "array"
        },
        "scheme": {
          "const": "LS",
          "type": "string"
        },
        "term": {
          "$ref": "#/definitions/LSTerm"
        }
      },
      "required": [
        "scheme",
        "config",
        "term"
      ],
      "type": "object"
    },
    "CSL.CSLDate": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "circa": {
              "description": "If date is approximate, this should be set to a \"truthy\" value.",
              "type": "boolean"
            },
            "date-parts": {
              "items": {
                "items": {
                  "type": [
                    "string",
                    "number"
                  ]
                },
                "maxItems": 3,
                "minItems": 1,
                "type": "array"
              },
              "maxItems": 2,
              "minItems": 1,
              "type": "array"
            },
            "literal": {
              "description": "Literal date string. Should only be used as a last resort.",
              "type": "string"
            },
            "raw": {
              "description": "May be used with Citeproc-js. String must be able to parse directly into a valid `Date` using `new Date()` **NOT A CSL STANDARD**",
              "type": "string"
            },
            "season": {
              "anyOf": [
                {
                  "const": 1,
                  "type": "number"
                },
                {
                  "const": 2,
                  "type": "number"
                },
                {
                  "const": 3,
                  "type": "number"
                },
                {
                  "const": 4,
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Three variants:      1.  1,   2,   3,   4  => spring, summer, fall, winter      2. \"1\", \"2\", \"3\", \"4\" => spring, summer, fall, winter      3.            string  => any literal string Spring, Summer, Fall, Winter"
            }
          },
          "required": [
            "date-parts"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "circa": {
              "description": "If date is approximate, this should be set to a \"truthy\" value.",
              "type": "boolean"
            },
            "date-parts": {
              "items": {
                "items": {
                  "type": [
                    "string",
                    "number"
                  ]
                },
                "maxItems": 3,
                "minItems": 1,
                "type": "array"
              },
              "maxItems": 2,
              "minItems": 1,
              "type": "array"
            },
            "literal": {
              "description": "Literal date string. Should only be used as a last resort.",
              "type": "string"
            },
            "raw": {
              "type": "string"
            },
            "season": {
              "anyOf": [
                {
                  "const": 1,
                  "type": "number"
                },
                {
                  "const": 2,
                  "type": "number"
                },
                {
                  "const": 3,
                  "type": "number"
                },
                {
                  "const": 4,
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Three variants:      1.  1,   2,   3,   4  => spring, summer, fall, winter      2. \"1\", \"2\", \"3\", \"4\" => spring, summer, fall, winter      3.            string  => any literal string Spring, Summer, Fall, Winter"
            }
          },
          "required": [
            "raw"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "circa": {
              "description": "If date is approximate, this should be set to a \"truthy\" value.",
              "type": "boolean"
            },
            "date-parts": {
              "items": {
                "items": {
                  "type": [
                    "string",
                    "number"
                  ]
                },
                "maxItems": 3,
                "minItems": 1,
                "type": "array"
              },
              "maxItems": 2,
              "minItems": 1,
              "type": "array"
            },
            "literal": {
              "type": "string"
            },
            "raw": {
              "description": "May be used with Citeproc-js. String must be able to parse directly into a valid `Date` using `new Date()` **NOT A CSL STANDARD**",
              "type": "string"
            },
            "season": {
              "anyOf": [
                {
                  "const": 1,
                  "type": "number"
                },
                {
                  "const": 2,
                  "type": "number"
                },
                {
                  "const": 3,
                  "type": "number"
                },
                {
                  "const": 4,
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Three variants:      1.  1,   2,   3,   4  => spring, summer, fall, winter      2. \"1\", \"2\", \"3\", \"4\" => spring, summer, fall, winter      3.            string  => any literal string Spring, Summer, Fall, Winter"
            }
          },
          "required": [
            "literal"
          ],
          "type": "object"
        }
      ]
    },
    "CSL.Data": {
      "additionalProperties": false,
      "properties": {
        "DOI": {
          "type": "string"
        },
        "ISBN": {
          "type": "string"
        },
        "ISSN": {
          "type": "string"
        },
        "PMCID": {
          "type": "string"
        },
        "PMID": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        },
        "abstract": {
          "type": "string"
        },
        "accessed": {
          "$ref": "#/definitions/CSL.CSLDate"
        },
        "annote": {
          "type": "string"
        },
        "archive": {
          "type": "string"
        },
        "archive-place": {
          "type": "string"
        },
        "archive_location": {
          "type": "string"
        },
        "author": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "authority": {
          "type": "string"
        },
        "call-number": {
          "type": "string"
        },
        "chapter-number": {
          "type": [
            "string",
            "number"
          ]
        },
        "citation-label": {
          "type": "string"
        },
        "citation-number": {
          "type": "string"
        },
        "collection-editor": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "collection-number": {
          "type": [
            "string",
            "number"
          ]
        },
        "collection-title": {
          "type": "string"
        },
        "composer": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "container": {
          "$ref": "#/definitions/CSL.CSLDate"
        },
        "container-author": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "container-title": {
          "type": "string"
        },
        "container-title-short": {
          "type": "string"
        },
        "dimensions": {
          "type": "string"
        },
        "director": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "edition": {
          "type": [
            "string",
            "number"
          ]
        },
        "editor": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "editorial-director": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "event": {
          "type": "string"
        },
        "event-date": {
          "$ref": "#/definitions/CSL.CSLDate"
        },
        "event-place": {
          "type": "string"
        },
        "first-reference-note-number": {
          "type": "string"
        },
        "genre": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "illustrator": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "interviewer": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "issue": {
          "type": [
            "string",
            "number"
          ]
        },
        "issued": {
          "$ref": "#/definitions/CSL.CSLDate"
        },
        "journalAbbreviation": {
          "type": "string"
        },
        "jurisdiction": {
          "type": "string"
        },
        "keyword": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "locator": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "number-of-pages": {
          "type": [
            "string",
            "number"
          ]
        },
        "number-of-volumes": {
          "type": [
            "string",
            "number"
          ]
        },
        "original-author": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "original-date": {
          "$ref": "#/definitions/CSL.CSLDate"
        },
        "original-publisher": {
          "type": "string"
        },
        "original-publisher-place": {
          "type": "string"
        },
        "original-title": {
          "type": "string"
        },
        "page": {
          "type": "string"
        },
        "page-first": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "publisher-place": {
          "type": "string"
        },
        "recipient": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "references": {
          "type": "string"
        },
        "reviewed-author": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "reviewed-title": {
          "type": "string"
        },
        "scale": {
          "type": "string"
        },
        "section": {
          "type": "string"
        },
        "shortTitle": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "submitted": {
          "$ref": "#/definitions/CSL.CSLDate"
        },
        "title": {
          "type": "string"
        },
        "title-short": {
          "type": "string"
        },
        "translator": {
          "items": {
            "$ref": "#/definitions/CSL.Person"
          },
          "type": "array"
        },
        "type": {
          "$ref": "#/definitions/CSL.ItemType"
        },
        "version": {
          "type": "string"
        },
        "volume": {
          "type": [
            "string",
            "number"
          ]
        },
        "year-suffix": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "type"
      ],
      "type": "object"
    },
    "CSL.ItemType": {
      "enum": [
        "article",
        "article-journal",
        "article-magazine",
        "article-newspaper",
        "bill",
        "book",
        "broadcast",
        "chapter",
        "dataset",
        "entry",
        "entry-dictionary",
        "entry-encyclopedia",
        "figure",
        "graphic",
        "interview",
        "legal_case",
        "legislation",
        "manuscript",
        "map",
        "motion_picture",
        "musical_score",
        "pamphlet",
        "paper-conference",
        "patent",
        "personal_communication",
        "post",
        "post-weblog",
        "report",
        "review",
        "review-book",
        "song",
        "speech",
        "thesis",
        "treaty",
        "webpage"
      ],
      "type": "string"
    },
    "CSL.Person": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "dropping-particle": {
              "description": "Name particles that are dropped when only the surname is shown (\"van\" in \"Ludwig van Beethoven\", which becomes \"Beethoven\")",
              "type": "string"
            },
            "family": {
              "type": "string"
            },
            "given": {
              "description": "Given names, either full (\"John Edward\") or initialized (\"J. E.\")",
              "type": "string"
            },
            "literal": {
              "type": "string"
            },
            "non-dropping-particle": {
              "description": "Name particles that are not dropped when only the surname is shown (\"de\" in the Dutch surname \"de Koning\") but which may be treated separately from the family name, e.g. for sorting",
              "type": "string"
            },
            "sequence": {
              "enum": [
                "first",
                "additional"
              ],
              "type": "string"
            },
            "suffix": {
              "description": "Name suffix, e.g. \"Jr.\" in \"John Smith Jr.\" and \"III\" in \"Bill Gates III\"",
              "type": "string"
            }
          },
          "required": [
            "family"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "dropping-particle": {
              "description": "Name particles that are dropped when only the surname is shown (\"van\" in \"Ludwig van Beethoven\", which becomes \"Beethoven\")",
              "type": "string"
            },
            "family": {
              "description": "Surname minus any particles and suffixes",
              "type": "string"
            },
            "given": {
              "description": "Given names, either full (\"John Edward\") or initialized (\"J. E.\")",
              "type": "string"
            },
            "literal": {
              "type": "string"
            },
            "non-dropping-particle": {
              "description": "Name particles that are not dropped when only the surname is shown (\"de\" in the Dutch surname \"de Koning\") but which may be treated separately from the family name, e.g. for sorting",
              "type": "string"
            },
            "sequence": {
              "enum": [
                "first",
                "additional"
              ],
              "type": "string"
            },
            "suffix": {
              "description": "Name suffix, e.g. \"Jr.\" in \"John Smith Jr.\" and \"III\" in \"Bill Gates III\"",
              "type": "string"
            }
          },
          "required": [
            "literal"
          ],
          "type": "object"
        }
      ]
    },
    "CSParameters": {
      "additionalProperties": false,
      "properties": {
        "mass_ratio": {
          "type": "number"
        },
        "statistical_weight_ratio": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "CrossSectionInput<AnySpecies>": {
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "description": "URL to JSON schema of this document.",
          "minLength": 1,
          "type": "string"
        },
        "complete": {
          "type": "boolean"
        },
        "contributor": {
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "A description of this dataset.",
          "type": "string"
        },
        "name": {
          "minLength": 1,
          "type": "string"
        },
        "processes": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string"
              },
              "labels": {
                "items": {
                  "minLength": 1,
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array"
              },
              "parameters": {
                "$ref": "#/definitions/CSParameters"
              },
              "reaction": {
                "additionalProperties": false,
                "properties": {
                  "lhs": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "count": {
                          "minimum": 1,
                          "type": "integer"
                        },
                        "state": {
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "count",
                        "state"
                      ],
                      "type": "object"
                    },
                    "type": "array",
                    "uniqueItems": true
                  },
                  "reversible": {
                    "type": "boolean"
                  },
                  "rhs": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "count": {
                          "minimum": 1,
                          "type": "integer"
                        },
                        "state": {
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "count",
                        "state"
                      ],
                      "type": "object"
                    },
                    "type": "array",
                    "uniqueItems": true
                  },
                  "type_tags": {
                    "items": {
                      "$ref": "#/definitions/ReactionTypeTag"
                    },
                    "type": "array",
                    "uniqueItems": true
                  }
                },
                "required": [
                  "lhs",
                  "rhs",
                  "reversible",
                  "type_tags"
                ],
                "type": "object"
              },
              "reference": {
                "items": {
                  "minLength": 1,
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "threshold": {
                "type": "number"
              },
              "type": {
                "const": "LUT",
                "type": "string"
              },
              "units": {
                "items": {
                  "minLength": 1,
                  "type": "string"
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array"
              },
              "values": {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "required": [
              "labels",
              "reaction",
              "threshold",
              "type",
              "units",
              "values"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array",
          "uniqueItems": true
        },
        "publishedIn": {
          "description": "A key into the `references` dict. This is a reference to the paper that presents this dataset.",
          "type": "string"
        },
        "references": {
          "additionalProperties": {
            "$ref": "#/definitions/Reference"
          },
          "type": "object"
        },
        "states": {
          "additionalProperties": {
            "$ref": "#/definitions/State<AnySpecies>"
          },
          "type": "object"
        },
        "terms_of_use": {
          "description": "URL to terms of use.",
          "minLength": 1,
          "type": "string"
        },
        "url": {
          "description": "URL where dataset was downloaded from.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "complete",
        "contributor",
        "description",
        "name",
        "processes",
        "references",
        "states"
      ],
      "type": "object"
    },
    "DiatomicVibrationalImpl": {
      "additionalProperties": false,
      "properties": {
        "v": {
          "type": "number"
        }
      },
      "required": [
        "v"
      ],
      "type": "object"
    },
    "J1L2Term": {
      "additionalProperties": false,
      "properties": {
        "J": {
          "type": "number"
        },
        "K": {
          "type": "number"
        },
        "P": {
          "type": "number"
        },
        "S": {
          "type": "number"
        }
      },
      "required": [
        "J",
        "K",
        "P",
        "S"
      ],
      "type": "object"
    },
    "LS1Term": {
      "additionalProperties": false,
      "properties": {
        "J": {
          "type": "number"
        },
        "K": {
          "type": "number"
        },
        "L": {
          "type": "number"
        },
        "P": {
          "enum": [
            -1,
            1
          ],
          "type": "number"
        },
        "S": {
          "type": "number"
        }
      },
      "required": [
        "J",
        "K",
        "L",
        "P",
        "S"
      ],
      "type": "object"
    },
    "LSTerm": {
      "additionalProperties": false,
      "properties": {
        "J": {
          "type": "number"
        },
        "L": {
          "type": "number"
        },
        "P": {
          "enum": [
            -1,
            1
          ],
          "type": "number"
        },
        "S": {
          "type": "number"
        }
      },
      "required": [
        "J",
        "L",
        "P",
        "S"
      ],
      "type": "object"
    },
    "LSTermImpl": {
      "additionalProperties": false,
      "properties": {
        "L": {
          "type": "number"
        },
        "P": {
          "enum": [
            -1,
            1
          ],
          "type": "number"
        },
        "S": {
          "type": "number"
        }
      },
      "required": [
        "L",
        "S",
        "P"
      ],
      "type": "object"
    },
    "LinearElectronicImpl": {
      "additionalProperties": false,
      "properties": {
        "Lambda": {
          "type": "number"
        },
        "S": {
          "type": "number"
        },
        "e": {
          "type": "string"
        },
        "reflection": {
          "enum": [
            "-",
            "+"
          ],
          "type": "string"
        }
      },
      "required": [
        "e",
        "Lambda",
        "S"
      ],
      "type": "object"
    },
    "LinearInversionCenterElectronicImpl": {
      "additionalProperties": false,
      "properties": {
        "Lambda": {
          "type": "number"
        },
        "S": {
          "type": "number"
        },
        "e": {
          "type": "string"
        },
        "parity": {
          "enum": [
            "g",
            "u"
          ],
          "type": "string"
        },
        "reflection": {
          "enum": [
            "-",
            "+"
          ],
          "type": "string"
        }
      },
      "required": [
        "Lambda",
        "S",
        "e",
        "parity"
      ],
      "type": "object"
    },
    "LinearTriatomVibrationalImpl": {
      "additionalProperties": false,
      "properties": {
        "v": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "v"
      ],
      "type": "object"
    },
    "ReactionTypeTag": {
      "enum": [
        "Elastic",
        "Effective",
        "Electronic",
        "Vibrational",
        "Rotational",
        "Attachment",
        "Ionization"
      ],
      "type": "string"
    },
    "Reference": {
      "$ref": "#/definitions/CSL.Data"
    },
    "RotationalImpl": {
      "additionalProperties": false,
      "properties": {
        "J": {
          "type": "number"
        }
      },
      "required": [
        "J"
      ],
      "type": "object"
    },
    "ShellEntry": {
      "additionalProperties": false,
      "properties": {
        "l": {
          "type": "number"
        },
        "n": {
          "type": "number"
        },
        "occupance": {
          "type": "number"
        }
      },
      "required": [
        "n",
        "l",
        "occupance"
      ],
      "type": "object"
    },
    "State<AnySpecies>": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "charge": {
              "type": "integer"
            },
            "electronic": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AtomLSImpl"
                },
                {
                  "items": {
                    "$ref": "#/definitions/AtomLSImpl"
                  },
                  "type": "array"
                }
              ]
            },
            "particle": {
              "minLength": 1,
              "type": "string"
            },
            "type": {
              "const": "AtomLS",
              "type": "string"
            }
          },
          "required": [
            "charge",
            "electronic",
            "particle",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "charge": {
              "type": "integer"
            },
            "electronic": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AtomJ1L2Impl"
                },
                {
                  "items": {
                    "$ref": "#/definitions/AtomJ1L2Impl"
                  },
                  "type": "array"
                }
              ]
            },
            "particle": {
              "minLength": 1,
              "type": "string"
            },
            "type": {
              "const": "AtomJ1L2",
              "type": "string"
            }
          },
          "required": [
            "charge",
            "electronic",
            "particle",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "charge": {
              "type": "integer"
            },
            "electronic": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AtomLS1Impl"
                },
                {
                  "items": {
                    "$ref": "#/definitions/AtomLS1Impl"
                  },
                  "type": "array"
                }
              ]
            },
            "particle": {
              "minLength": 1,
              "type": "string"
            },
            "type": {
              "const": "AtomLS1",
              "type": "string"
            }
          },
          "required": [
            "charge",
            "electronic",
            "particle",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "charge": {
              "type": "integer"
            },
            "electronic": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "Lambda": {
                      "type": "number"
                    },
                    "S": {
                      "type": "number"
                    },
                    "e": {
                      "type": "string"
                    },
                    "reflection": {
                      "enum": [
                        "-",
                        "+"
                      ],
                      "type": "string"
                    },
                    "vibrational": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "rotational": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "$ref": "#/definitions/RotationalImpl"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/RotationalImpl"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "v": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "v"
                          ],
                          "type": "object"
                        },
                        {
                          "items": {
                            "$ref": "#/definitions/DiatomicVibrationalImpl"
                          },
                          "type": "array"
                        }
                      ]
                    }
                  },
                  "required": [
                    "Lambda",
                    "S",
                    "e"
                  ],
                  "type": "object"
                },
                {
                  "items": {
                    "$ref": "#/definitions/LinearElectronicImpl"
                  },
                  "type": "array"
                }
              ]
            },
            "particle": {
              "minLength": 1,
              "type": "string"
            },
            "type": {
              "const": "HeteronuclearDiatom",
              "type": "string"
            }
          },
          "required": [
            "charge",
            "electronic",
            "particle",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "charge": {
              "type": "integer"
            },
            "electronic": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "Lambda": {
                      "type": "number"
                    },
                    "S": {
                      "type": "number"
                    },
                    "e": {
                      "type": "string"
                    },
                    "parity": {
                      "enum": [
                        "g",
                        "u"
                      ],
                      "type": "string"
                    },
                    "reflection": {
                      "enum": [
                        "-",
                        "+"
                      ],
                      "type": "string"
                    },
                    "vibrational": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "rotational": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "$ref": "#/definitions/RotationalImpl"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/RotationalImpl"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "v": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "v"
                          ],
                          "type": "object"
                        },
                        {
                          "items": {
                            "$ref": "#/definitions/DiatomicVibrationalImpl"
                          },
                          "type": "array"
                        }
                      ]
                    }
                  },
                  "required": [
                    "Lambda",
                    "S",
                    "e",
                    "parity"
                  ],
                  "type": "object"
                },
                {
                  "items": {
                    "$ref": "#/definitions/LinearInversionCenterElectronicImpl"
                  },
                  "type": "array"
                }
              ]
            },
            "particle": {
              "minLength": 1,
              "type": "string"
            },
            "type": {
              "const": "HomonuclearDiatom",
              "type": "string"
            }
          },
          "required": [
            "charge",
            "electronic",
            "particle",
            "type"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "charge": {
              "type": "integer"
            },
            "electronic": {
              "anyOf": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "Lambda": {
                      "type": "number"
                    },
                    "S": {
                      "type": "number"
                    },
                    "e": {
                      "type": "string"
                    },
                    "parity": {
                      "enum": [
                        "g",
                        "u"
                      ],
                      "type": "string"
                    },
                    "reflection": {
                      "enum": [
                        "-",
                        "+"
                      ],
                      "type": "string"
                    },
                    "vibrational": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "rotational": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "$ref": "#/definitions/RotationalImpl"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/RotationalImpl"
                                  },
                                  "type": "array"
                                }
                              ]
                            },
                            "v": {
                              "items": {
                                "type": "number"
                              },
                              "type": "array"
                            }
                          },
                          "required": [
                            "v"
                          ],
                          "type": "object"
                        },
                        {
                          "items": {
                            "$ref": "#/definitions/LinearTriatomVibrationalImpl"
                          },
                          "type": "array"
                        }
                      ]
                    }
                  },
                  "required": [
                    "Lambda",
                    "S",
                    "e",
                    "parity"
                  ],
                  "type": "object"
                },
                {
                  "items": {
                    "$ref": "#/definitions/LinearInversionCenterElectronicImpl"
                  },
                  "type": "array"
                }
              ]
            },
            "particle": {
              "minLength": 1,
              "type": "string"
            },
            "type": {
              "const": "LinearTriatomInversionCenter",
              "type": "string"
            }
          },
          "required": [
            "charge",
            "electronic",
            "particle",
            "type"
          ],
          "type": "object"
        }
      ]
    }
  },
  "description": "To add a cross section set to the LXCat application, the set should be valid against this schema."
}