# services:
#   - name: arangodb/arangodb:3.7.12
#     alias: db

build-dev:
  image: node:lts-bullseye
  stage: build
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  script:
    - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
    - source "$HOME/.cargo/env"
    - npm ci --cache .npm --prefer-offline
    - npm run build
    - npm run lint
    # TODO Run prettier --check to enforce merge requests are formatted correctly
  # TODO reuse artifacts in workspace specific ci tasks like tests
  artifacts:
    paths:
      - schema/dist
      - database/dist
      - converter/dist
  #     - app/.next
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

test-app:
  stage: test
  dependencies:
    - build-dev
  image: mcr.microsoft.com/playwright:v1.23.0-focal
  # Testcontainers requirements taken from https://www.testcontainers.org/supported_docker_environment/continuous_integration/gitlab_ci/#example-using-dind-docker-in-docker
  services:
    - name: docker:20.10.16-dind
      # explicitly disable tls to avoid docker startup interruption
      command: ["--tls=false"]
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Improve performance with overlayfs.
    DOCKER_DRIVER: overlay2
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/    
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test -w app -- run --coverage --reporter=default --reporter=junit --outputFile.junit=./junit-unit.xml
    - npx playwright install chromium
    - PLAYWRIGHT_JUNIT_OUTPUT_NAME=junit-e2e.xml npm run test:e2e -w app -- --reporter=junit
    - npm -w app run build-storybook
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: app/coverage/cobertura-coverage.xml
      junit: [app/junit-e2e.xml, app/junit-unit.xml]
    paths:
      - app/storybook-static/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

# TODO cache ~/.cache/ms-playwright

test-database:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/    
  stage: test
  dependencies:
    - build-dev
  image: node:lts-bullseye
  # Testcontainers requirements taken from https://www.testcontainers.org/supported_docker_environment/continuous_integration/gitlab_ci/#example-using-dind-docker-in-docker
  services:
    - name: docker:20.10.16-dind
      # explicitly disable tls to avoid docker startup interruption
      command: ["--tls=false"]
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Improve performance with overlayfs.
    DOCKER_DRIVER: overlay2
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test -w database -- run --coverage --reporter=default --reporter=junit --outputFile.junit=./junit.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: database/coverage/cobertura-coverage.xml
      junit: database/junit.xml
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

test-schema:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/    
  stage: test
  dependencies:
    - build-dev
  image: node:lts-bullseye
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test -w schema -- run --coverage --reporter=default --reporter=junit --outputFile.junit=./junit.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: schema/coverage/cobertura-coverage.xml
      junit: schema/junit.xml
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

test-converter:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  stage: test
  dependencies:
    - build-dev
  image: node:lts-bullseye
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run test -w converter
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

# docker in docker see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker
build-prod:
  image: docker:20.10.16
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add --no-cache docker-compose
  script:
    - touch .env
    - docker-compose build
    # TODO do stuff with build images
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
